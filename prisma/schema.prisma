generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blog_posts {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug         String    @unique @db.VarChar(255)
  title        String    @db.VarChar(500)
  excerpt      String?
  content      String
  author       String    @db.VarChar(255)
  published_at DateTime? @default(now()) @db.Timestamptz(6)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  read_time    String?   @db.VarChar(50)
  category     String?   @db.VarChar(100)
  featured     Boolean?  @default(false)
  published    Boolean?  @default(true)

  @@index([category], map: "idx_blog_posts_category")
  @@index([published], map: "idx_blog_posts_published")
  @@index([published_at(sort: Desc)], map: "idx_blog_posts_published_at")
  @@index([slug], map: "idx_blog_posts_slug")
}

model user {
  id            String   @id @default(uuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String   @default("user")
  accounts      account[]
  sessions      session[]
}

model account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
